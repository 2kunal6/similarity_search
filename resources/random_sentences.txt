Puts the two whole widgets in the correct position depending on compound.
Return a markdown representation of the top comments.
r''' Function to calculate the centroid as the mean of a set of vertices. Used for pore and throat.
Helper that reads the UTF-8 content of the specified file, or None if the file doesn't exist. This returns a unicode string.
:param timezone: timezone do usuário do sistema
Read the lines of the given file from the given subsystem and split the lines into key-value pairs. Do not include the subsystem name in the option name. Only call this method if the given subsystem is available.
Load the tool-info class. @param tool_name: The name of the tool-info module. Either a full Python package name or a name within the benchexec.tools package. @return: A tuple of the full name of the used tool-info module and an instance of the tool-info class.
16 colors supported
Helper function for formatting the content of the options line
Execute a command or raise an error. :Parameters: - `dbname`: name of the database on which to run the command - `spec`: a command document as a dict, SON, or mapping object - `slave_ok`: whether to set the SlaveOkay wire protocol bit - `read_preference`: a read preference - `codec_options`: a CodecOptions instance - `check`: raise OperationFailure if there are errors - `allowable_errors`: errors to ignore if `check` is True - `check_keys`: if True, check `spec` for invalid keys - `read_concern`: The read concern for this command. - `write_concern`: The write concern for this command. - `parse_write_concern_error`: Whether to parse the ``writeConcernError`` field in the command response. - `collation`: The collation for this command. - `session`: optional ClientSession instance. - `client`: optional MongoClient for gossipping $clusterTime. - `retryable_write`: True if this command is a retryable write. - `publish_events`: Should we publish events for this command? - `user_fields` (optional): Response fields that should be decoded using the TypeDecoders from codec_options, passed to bson._decode_all_selective.
Shortcut to replace a pending Take Profit Order in an Account Args: accountID : The ID of the Account orderID : The ID of the Take Profit Order to replace kwargs : The arguments to create a TakeProfitOrderRequest Returns: v20.response.Response containing the results from submitting the request
r""" Missing description Parameters ---------- target : OpenPNM Object The object for which these values are being calculated. This controls the length of the calculated array, and also provides access to other necessary thermofluid properties. K2 : scalar Fluid specific constant n : scalar Fluid specific constant temperature : string The dictionary key containing the temperature values (K) critical_temperature : string The dictionary key containing the critical temperature values (K) critical_pressure : string The dictionary key containing the critical pressure values (K)
Create and return a connection proxy to the sqlite database.
Get leaderboard entries. :param start: start entry, not index (e.g. rank 1 is ``start=1``) :type start: :class:`int` :param end: end entry, not index (e.g. only one entry then ``start=1,end=1``) :type end: :class:`int` :param data_request: data being requested :type data_request: :class:`steam.enums.common.ELeaderboardDataRequest` :param steam_ids: list of steam ids when using :prop:`.ELeaderboardDataRequest.Users` :type steamids: :class:`list` :return: a list of entries, see ``CMsgClientLBSGetLBEntriesResponse`` :rtype: :class:`list` :raises: :class:`LookupError` on message timeout or error
r""" Calculate the thermal conductance of conduits in network, where a conduit is ( 1/2 pore - full throat - 1/2 pore ). See the notes section. Parameters ---------- target : OpenPNM Object The object which this model is associated with. This controls the length of the calculated array, and also provides access to other necessary properties. pore_thermal_conductivity : string Dictionary key of the pore thermal conductivity values throat_thermal_conductivity : string Dictionary key of the throat thermal conductivity values pore_area : string Dictionary key of the pore area values throat_area : string Dictionary key of the throat area values conduit_shape_factors : string Dictionary key of the conduit DIFFUSION shape factor values Returns ------- g : ndarray Array containing thermal conductance values for conduits in the geometry attached to the given physics object. Notes ----- (1) This function requires that all the necessary phase properties already be calculated. (2) This function calculates the specified property for the *entire* network then extracts the values for the appropriate throats at the end. (3) This function assumes cylindrical throats with constant cross-section area. Corrections for different shapes and variable cross-section area can be imposed by passing the proper flow_shape_factor argument.
Decompress all of the bzip2-ed blocks. Returns the decompressed data as a `bytearray`.
解析搜索结果页面，返回字幕信息列表
Render the viewlet
propagate the ensemble forward using sweep.
Return a NetworkX DiGraph object representing the condensed tree. Edge weights in the graph are the lamba values at which child nodes 'leave' the parent cluster. Nodes have a `size` attribute attached giving the number of points that are in the cluster (or 1 if it is a singleton point) at the point of cluster creation (fewer points may be in the cluster at larger lambda values).
Asynchronously close any open management Links and close the Session. Cleans up and C objects for both mgmt Links and Session.
Follow a path pre-defined by a set of at least 4 points. This Path will interpolate the points into a curve and follow that curve. :param points: The list of points that defines the path. :param steps: The number of steps to take to follow the path.
Update hook
Returns the value of the object's attribute.
Whether there are any Servers of types besides Unknown.
Returns the list of analyses assigned to the slot passed in, sorted by the positions they have within the slot. :param slot: the slot where the analyses are located :type slot: int :return: a list of analyses
r""" Calculates the net rate of material moving into a given set of pores or throats Parameters ---------- pores : array_like The pores for which the rate should be calculated throats : array_like The throats through which the rate should be calculated mode : string, optional Controls how to return the rate. Options are: *'group'*: (default) Returns the cumulative rate of material moving into the given set of pores *'single'* : Calculates the rate for each pore individually Returns ------- If ``pores`` are specified, then the returned values indicate the net rate of material exiting the pore or pores. Thus a positive rate indicates material is leaving the pores, and negative values mean material is entering. If ``throats`` are specified the rate is calculated in the direction of the gradient, thus is always positive. If ``mode`` is 'single' then the cumulative rate through the given pores (or throats) are returned as a vector, if ``mode`` is 'group' then the individual rates are summed and returned as a scalar.
Open the specified path using HTTP, using the host/port/protocol associated with the specified stub. If the stub has a session cookie, it is included with the HTTP request. Returns the response as a file-like object.
Return a copy of the Primitive object as a Trimesh object.
Ln - N days low
Extract the projected density of states from a CompleteDos object. Args: dos (:obj:`~pymatgen.electronic_structure.dos.CompleteDos`): The density of states. elements (:obj:`dict`, optional): The elements and orbitals to extract from the projected density of states. Should be provided as a :obj:`dict` with the keys as the element names and corresponding values as a :obj:`tuple` of orbitals. For example, the following would extract the Bi s, px, py and d orbitals:: {'Bi': ('s', 'px', 'py', 'd')} If an element is included with an empty :obj:`tuple`, all orbitals for that species will be extracted. If ``elements`` is not set or set to ``None``, all elements for all species will be extracted. lm_orbitals (:obj:`dict`, optional): The orbitals to decompose into their lm contributions (e.g. p -> px, py, pz). Should be provided as a :obj:`dict`, with the elements names as keys and a :obj:`tuple` of orbitals as the corresponding values. For example, the following would be used to decompose the oxygen p and d orbitals:: {'O': ('p', 'd')} atoms (:obj:`dict`, optional): Which atomic sites to use when calculating the projected density of states. Should be provided as a :obj:`dict`, with the element names as keys and a :obj:`tuple` of :obj:`int` specifying the atomic indices as the corresponding values. The elemental projected density of states will be summed only over the atom indices specified. If an element is included with an empty :obj:`tuple`, then all sites for that element will be included. The indices are 0 based for each element specified in the POSCAR. For example, the following will calculate the density of states for the first 4 Sn atoms and all O atoms in the structure:: {'Sn': (1, 2, 3, 4), 'O': (, )} If ``atoms`` is not set or set to ``None`` then all atomic sites for all elements will be considered. Returns: dict: The projected density of states. Formatted as a :obj:`dict` of :obj:`dict` mapping the elements and their orbitals to :obj:`~pymatgen.electronic_structure.dos.Dos` objects. For example:: { 'Bi': {'s': Dos, 'p': Dos ... }, 'S': {'s': Dos} }
:return: GitConfigParser allowing to read the full git configuration, but not to write it The configuration will include values from the system, user and repository configuration files. :param config_level: For possible values, see config_writer method If None, all applicable levels will be used. Specify a level in case you know which file you wish to read to prevent reading multiple files. :note: On windows, system configuration cannot currently be read as the path is unknown, instead the global path will be used.
Get the VRF with id 'id'.
Adds a VRF to an interface Notes: Requires interface to be in routed mode. Must apply ip address after VRF has been applied. This feature can also be accessed through the interfaces api. Args: vrf_name (str): The VRF name to configure interface (str): The interface to add the VRF too default (bool): Set interface VRF forwarding to default disable (bool): Negate interface VRF forwarding Returns: True if the operation was successful otherwise False
get the parameter solution Matrix at a singular value V_1 * S_1^(_1) * U_1^T Parameters ---------- singular_value : int singular value to calc R at Returns ------- G : pyemu.Matrix parameter solution matrix at singular value
Formats the max time record to a days, hours, minutes string
Rename the content after it was created/added
Check if a list of rays hits the surface. Parameters ---------- ray_origins: (n,3) float, origins of rays ray_directions: (n,3) float, direction (vector) of rays Returns ---------- hit: (n,) bool, did each ray hit the surface
POST /auth/<mount_point>/role/<role> :param role: :type role: :param bound_ami_id: :type bound_ami_id: :param bound_account_id: :type bound_account_id: :param bound_iam_role_arn: :type bound_iam_role_arn: :param bound_iam_instance_profile_arn: :type bound_iam_instance_profile_arn: :param bound_ec2_instance_id: :type bound_ec2_instance_id: :param bound_region: :type bound_region: :param bound_vpc_id: :type bound_vpc_id: :param bound_subnet_id: :type bound_subnet_id: :param role_tag: :type role_tag: :param ttl: :type ttl: :param max_ttl: :type max_ttl: :param period: :type period: :param policies: :type policies: :param allow_instance_migration: :type allow_instance_migration: :param disallow_reauthentication: :type disallow_reauthentication: :param resolve_aws_unique_ids: :type resolve_aws_unique_ids: :param mount_point: :type mount_point: :return: :rtype:
Calls :meth:`import_export.fields.Field.save` if ``Field.attribute`` and ``Field.column_name`` are found in ``data``.
Swap dragged column with its side (=left/right) neighbor.
Append a ``<p:pic>`` shape to the group/shapetree having properties as specified in call.
Service triggered each time an item is iterated in folderitems. The use of this service prevents the extra-loops in child objects. :obj: the instance of the class to be foldered :item: dict containing the properties of the object to be used by the template :index: current index of the item
Returns all of the loaded connections names as a list
Convert a list of face colors into a list of vertex colors. Parameters ----------- mesh : trimesh.Trimesh object face_colors: (n, (3,4)) int, face colors dtype: data type of output Returns ----------- vertex_colors: (m,4) dtype, colors for each vertex
Retrieve one option from Git config.
POST /auth/<mount point>/login :param mount_point: :type mount_point: :param use_token: :type use_token: :return: :rtype:
Display statistics (number of users) for each unique flair item.
Scan inventory. As Ansible is a big mess without any kind of preconceived notion of design, there are several (and I use that word lightly) different ways inventory_path can be handled: - a non-executable file: handled as a Ansible 'hosts' file. - an executable file: handled as a dynamic inventory file. - a directory: scanned for Ansible 'hosts' and dynamic inventory files.
Iterate the locals of an item and yield (name,valu) pairs. Example: for name,valu in getItemLocals(item): dostuff()
:return: Blob using the information of this index entry
One size fits all method to ensure a target context has been preloaded with a set of small files and Python modules.
r"""Calculate the profile a parcel takes through the atmosphere. The parcel starts at `temperature`, and `dewpt`, lifted up dry adiabatically to the LCL, and then moist adiabatically from there. `pressure` specifies the pressure levels for the profile. Parameters ---------- pressure : `pint.Quantity` The atmospheric pressure level(s) of interest. The first entry should be the starting point pressure. temperature : `pint.Quantity` The starting temperature dewpt : `pint.Quantity` The starting dew point Returns ------- `pint.Quantity` The parcel temperatures at the specified pressure levels. See Also -------- lcl, moist_lapse, dry_lapse
Return a new |EmbeddedXlsxPart| instance added to *package* and containing *xlsx_blob*.
Return the number of runs of a minimum length. Parameters ---------- da: N-dimensional Xarray data array (boolean) Input data array window : int Minimum run length. dim : Xarray dimension (default = 'time') Dimension along which to calculate consecutive run Returns ------- out : N-dimensional xarray data array (int) Number of distinct runs of a minimum length.
Currently active item on the _timeline Canvas :rtype: str
Get the full content object. Returns None if the param passed in is not a valid, not a valid object or not found :param brain_or_object_or_uid: UID/Catalog brain/content object :returns: content object
Take stripack df/dx, df/dy, df/dz format and convert to surface gradients df/dlon, df/dlat Notes
r""" Saves data from the given dictionary into the specified file. Parameters ---------- dct : dictionary A dictionary to save to file, presumably obtained from the ``to_dict`` method of this class. filename : string or path object The filename to store the dictionary.
Parse a line in a [XXXXX:vars] section.
Create an EventHubClient from a connection string. :param conn_str: The connection string. :type conn_str: str :param eventhub: The name of the EventHub, if the EntityName is not included in the connection string. :type eventhub: str :param debug: Whether to output network trace logs to the logger. Default is `False`. :type debug: bool :param http_proxy: HTTP proxy settings. This must be a dictionary with the following keys: 'proxy_hostname' (str value) and 'proxy_port' (int value). Additionally the following keys may also be present: 'username', 'password'. :type http_proxy: dict[str, Any] :param auth_timeout: The time in seconds to wait for a token to be authorized by the service. The default value is 60 seconds. If set to 0, no timeout will be enforced from the client. :type auth_timeout: int
Overrides parent function. If the ids passed in are from Attachment types, the function ignores the DeleteObjects permission. For the rest of types, it works as usual (checks the permission)
r"""Calculate the square of the Brunt-Vaisala frequency. Brunt-Vaisala frequency squared (a measure of atmospheric stability) is given by the formula: .. math:: N^2 = \frac{g}{\theta} \frac{d\theta}{dz} This formula is based off of Equations 3.75 and 3.77 in [Hobbs2006]_. Parameters ---------- heights : array-like One-dimensional profile of atmospheric height potential_temperature : array-like Atmospheric potential temperature axis : int, optional The axis corresponding to vertical in the potential temperature array, defaults to 0. Returns ------- array-like The square of the Brunt-Vaisala frequency. See Also -------- brunt_vaisala_frequency, brunt_vaisala_period, potential_temperature
Return `p:grpSp` element newly appended to this shape tree. The element contains no sub-shapes, is positioned at (0, 0), and has width and height of zero.
Login using email/password
Instantiate a new Trade from a dict (generally from loading a JSON response). The data used to instantiate the Trade is a shallow copy of the dict passed in, with any complex child types instantiated appropriately.
Get the full singular value matrix of self Returns ------- Matrix : Matrix
:param name: :param bits: :param stride: :param lower_bound: :param upper_bound: :param to_conv: :param bool discrete_set: :param int discrete_set_max_cardinality: :return:
Fix client permissions
Given a constraint, _unpack_truisms() returns a set of constraints that must be True this constraint to be True.
Get the pool with id 'id'.
Reindex contents generated by Generic Setup
Returns the services information
Parses the data line into a dictionary for the importer
r""" Mason and Morrow relate the capillary pressure to the shaped factor in a similar way to Mortensen but for triangles. References ---------- Mason, G. and Morrow, N.R.. Capillary behavior of a perfectly wetting liquid in irregular triangular tubes. Journal of Colloid and Interface Science, 141(1), pp.262-274 (1991).
Create a strategy, or just returns it if it's already one. :param name: :return: Strategy
Scroll both categories Canvas and scrolling container
Return a reference, making it eligable for recycling once its reference count reaches zero.
Change account's password :param password: current account password :type password: :class:`str` :param new_password: new account password :type new_password: :class:`str` :param email_code: confirmation code from email :type email_code: :class:`str` :return: result :rtype: :class:`.EResult` .. note:: First request change mail via :meth:`request_password_change_mail()` to get the email code
Clean up and apply standard formatting to variable names.
list all records :param str rtype: type of record :param str name: name of record :param mixed content: value of record :return list: list of found records :raises Exception: on error
Define indices that reflect segment and pseudotime order. Writes ------ indices : np.ndarray Index array of shape n, which stores an ordering of the data points with respect to increasing segment index and increasing pseudotime. changepoints : np.ndarray Index array of shape len(ssegs)-1, which stores the indices of points where the segment index changes, with respect to the ordering of indices.
Generate random samples from the model. Parameters ---------- n_samples : int Number of samples to generate. random_state : RandomState or an int seed A random number generator instance. If ``None``, the object's ``random_state`` is used. Returns ------- X : array, shape (n_samples, n_features) Feature matrix. state_sequence : array, shape (n_samples, ) State sequence produced by the model.
Check if all of a container's elements are unique. Successively tries first to rely that the elements are hashable, then falls back on them being sortable, and finally falls back on brute force.
Given the name of a loaded module `fullname`, attempt to find its source code. :returns: Tuple of `(module path, source text, is package?)`, or :data:`None` if the source cannot be found.
Code taken from Products.CMFPlone.WorkflowTool This version adds some commits and loggins
Get the member object of a module. :param dotted_name: The dotted name of the module, e.g. 'scipy.special' :type dotted_name: string :param member: The name of the member function, e.g. 'gammaincinv' :type member: string :returns: member object or None
r"""Calculate CAPE and CIN. Calculate the convective available potential energy (CAPE) and convective inhibition (CIN) of a given upper air profile and parcel path. CIN is integrated between the surface and LFC, CAPE is integrated between the LFC and EL (or top of sounding). Intersection points of the measured temperature profile and parcel profile are linearly interpolated. Parameters ---------- pressure : `pint.Quantity` The atmospheric pressure level(s) of interest. The first entry should be the starting point pressure. temperature : `pint.Quantity` The atmospheric temperature corresponding to pressure. dewpt : `pint.Quantity` The atmospheric dew point corresponding to pressure. parcel_profile : `pint.Quantity` The temperature profile of the parcel Returns ------- `pint.Quantity` Convective available potential energy (CAPE). `pint.Quantity` Convective inhibition (CIN). Notes ----- Formula adopted from [Hobbs1977]_. .. math:: \text{CAPE} = -R_d \int_{LFC}^{EL} (T_{parcel} - T_{env}) d\text{ln}(p) .. math:: \text{CIN} = -R_d \int_{SFC}^{LFC} (T_{parcel} - T_{env}) d\text{ln}(p) * :math:`CAPE` Convective available potential energy * :math:`CIN` Convective inhibition * :math:`LFC` Pressure of the level of free convection * :math:`EL` Pressure of the equilibrium level * :math:`SFC` Level of the surface or beginning of parcel path * :math:`R_d` Gas constant * :math:`g` Gravitational acceleration * :math:`T_{parcel}` Parcel temperature * :math:`T_{env}` Environment temperature * :math:`p` Atmospheric pressure See Also -------- lfc, el
Find first bit set or clear in a string. :raises ValueError: if bit is not 0 or 1
Add the variables for each entry in a 'children' section to the hosts belonging to that entry.
Remove prefix
Check if specific URL has not been provided, otherwise, use cls._URL
This must return an iterator that returns wrapped contours. Subclasses may override this method.
Subclasses may override this method.
Generates signatures for all the sections in a PE file. If the section contains any data a signature will be created for it. The signature name will be a combination of the parameter 'name' and the section number and its name.
Compute log Mel-filterbank energy features from an audio signal. Args: signal (array): the audio signal from which to compute features. Should be an N x 1 array sampling_frequency (int): the sampling frequency of the signal we are working with. frame_length (float): the length of each frame in seconds. Default is 0.020s frame_stride (float): the step between successive frames in seconds. Default is 0.02s (means no overlap) num_filters (int): the number of filters in the filterbank, default 40. fft_length (int): number of FFT points. Default is 512. low_frequency (float): lowest band edge of mel filters. In Hz, default is 0. high_frequency (float): highest band edge of mel filters. In Hz, default is samplerate/2 Returns: array: Features - The log energy of fiterbank of size num_frames x num_filters frame_log_energies. The log energy of each frame num_frames x 1
Geocode an arbitrary number of strings from Command Line.
Determines if a class attribute is a field value declaration. Based on the name and value of the class attribute, return ``True`` if it looks like a declaration of a default field value, ``False`` if it is private (name starts with '_') or a classmethod or staticmethod.
perform two point gesture. Usage: d().gesture(startPoint1, startPoint2).to(endPoint1, endPoint2, steps) d().gesture(startPoint1, startPoint2, endPoint1, endPoint2, steps)
Return matrix to rotate about axis defined by point and direction. Parameters ------------- angle : float, or sympy.Symbol Angle, in radians or symbolic angle direction : (3,) float Unit vector along rotation axis point : (3, ) float, or None Origin point of rotation axis Returns ------------- matrix : (4, 4) float, or (4, 4) sympy.Matrix Homogenous transformation matrix Examples ------------- >>> R = rotation_matrix(math.pi/2, [0, 0, 1], [1, 0, 0]) >>> np.allclose(np.dot(R, [0, 0, 0, 1]), [1, -1, 0, 1]) True >>> angle = (random.random() - 0.5) * (2*math.pi) >>> direc = np.random.random(3) - 0.5 >>> point = np.random.random(3) - 0.5 >>> R0 = rotation_matrix(angle, direc, point) >>> R1 = rotation_matrix(angle-2*math.pi, direc, point) >>> is_same_transform(R0, R1) True >>> R0 = rotation_matrix(angle, direc, point) >>> R1 = rotation_matrix(-angle, -direc, point) >>> is_same_transform(R0, R1) True >>> I = np.identity(4, np.float64) >>> np.allclose(I, rotation_matrix(math.pi*2, direc)) True >>> np.allclose(2, np.trace(rotation_matrix(math.pi/2,direc,point))) True
